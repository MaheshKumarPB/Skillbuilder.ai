import axios from "axios";
import { z } from "zod";
import type { ProfileSuggestion } from "../types";

const RAPIDAPI_KEY = import.meta.env.VITE_RAPIDAPI_KEY || "";
const OPENROUTER_API_KEY = import.meta.env.VITE_OPENROUTER_API_KEY || "";
const MODEL = "gpt-3.5-turbo"; // Default model
const API_TIMEOUT = 30000; // 30 seconds
const CACHE_TTL = 1000 * 60 * 60; // 1 hour

// Add configuration check helper
export const isLinkedInAnalysisConfigured = (): boolean => {
  return Boolean(RAPIDAPI_KEY && OPENROUTER_API_KEY);
};

// Response validation schemas
const openRouterResponseSchema = z.object({
  choices: z
    .array(
      z.object({
        message: z.object({
          content: z.string(),
        }),
      })
    )
    .min(1),
});

// LinkedIn skill schema
const skillSchema = z
  .object({
    name: z.string(),
    endorsements: z.number().optional(),
  })
  .transform((skill) => skill.name);

// Define interface for skill object with name
interface SkillObject {
  name: string;
  [key: string]: any;
}

// Type guard function
function isSkillObject(value: any): value is SkillObject {
  return value !== null && typeof value === "object" && "name" in value;
}

// LinkedIn profile schema
const linkedinProfileSchema = z
  .object({
    data: z
      .object({
        full_name: z.string().optional(),
        headline: z.string().optional(),
        summary: z.string().optional(),
        occupation: z.string().optional(),
        experiences: z
          .array(
            z.object({
              company: z.string(),
              title: z.string(),
              description: z.string().optional(),
              location: z.string().optional(),
              starts_at: z
                .object({
                  month: z.number(),
                  year: z.number(),
                })
                .optional(),
              ends_at: z
                .object({
                  month: z.number(),
                  year: z.number(),
                })
                .optional(),
            })
          )
          .optional()
          .default([]),
        education: z
          .array(
            z.object({
              school: z.string(),
              degree_name: z.string().optional(),
              field_of_study: z.string().optional(),
              starts_at: z
                .object({
                  year: z.number(),
                })
                .optional(),
              ends_at: z
                .object({
                  year: z.number(),
                })
                .optional(),
            })
          )
          .optional()
          .default([]),
        skills: z
          .union([
            z.array(skillSchema),
            z.array(z.string()),
            z.string(),
            z.null(),
          ])
          .transform((val) => {
            if (!val) return [];
            if (typeof val === "string") {
              return val
                .split(",")
                .map((s) => s.trim())
                .filter(Boolean);
            }
            if (Array.isArray(val)) {
              const result: string[] = [];
              for (const skill of val) {
                if (typeof skill === "string") {
                  result.push(skill);
                } else if (isSkillObject(skill)) {
                  result.push(skill.name);
                }
              }
              return result;
            }
            return [];
          })
          .default([]),
        certifications: z
          .array(
            z.object({
              name: z.string(),
              issuing_organization: z.string().optional(),
              issue_date: z.string().optional(),
            })
          )
          .optional()
          .default([]),
      })
      .optional()
      .default({}),
  })
  .transform((data) => data.data);

interface LinkedInAnalysisResult {
  score: number;
  suggestions: ProfileSuggestion[];
  strengths: string[];
  weaknesses: string[];
}

// Cache management
const cache = new Map<string, { data: any; timestamp: number }>();

function clearExpiredCache() {
  const now = Date.now();
  for (const [key, value] of cache.entries()) {
    if (now - value.timestamp > CACHE_TTL) {
      cache.delete(key);
    }
  }
}

function extractProfileUrl(url: string): string {
  const urlPattern = /linkedin\.com\/in\/([^\/\?#]+)/i;
  const match = url.match(urlPattern);
  if (!match) {
    throw new Error(
      "Invalid LinkedIn profile URL format. Please provide a valid profile URL (e.g., https://www.linkedin.com/in/username)"
    );
  }
  return url;
}

async function fetchProfileData(profileUrl: string, retries = 2) {
  if (!isLinkedInAnalysisConfigured()) {
    throw new Error("LinkedIn analysis service is not properly configured");
  }

  const cacheKey = `profile:${profileUrl}`;

  // Check cache
  const cached = cache.get(cacheKey);
  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
    return cached.data;
  }

  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);

  try {
    const response = await axios.get(
      "https://linkedin-api8.p.rapidapi.com/get-profile-data-by-url",
      {
        params: {
          url: profileUrl,
        },
        headers: {
          "x-rapidapi-key": RAPIDAPI_KEY,
          "x-rapidapi-host": "linkedin-api8.p.rapidapi.com",
        },
        signal: controller.signal,
        timeout: API_TIMEOUT,
      }
    );

    // Parse and validate response data
    const validatedData = linkedinProfileSchema.safeParse({
      data: response.data,
    });

    if (!validatedData.success) {
      console.error(
        "LinkedIn API response validation failed:",
        validatedData.error
      );
      throw new Error("Invalid response format from LinkedIn API");
    }

    // Cache successful response
    cache.set(cacheKey, {
      data: validatedData.data,
      timestamp: Date.now(),
    });

    return validatedData.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      if (error.code === "ECONNABORTED") {
        throw new Error("Request timed out. Please try again.");
      }
      if (error.response?.status === 429 && retries > 0) {
        await new Promise((resolve) => setTimeout(resolve, 1000));
        return fetchProfileData(profileUrl, retries - 1);
      }
      if (error.response?.status === 404) {
        throw new Error(
          "LinkedIn profile not found. Please check the URL and try again."
        );
      }
      throw new Error(
        `Failed to fetch profile data: ${
          error.response?.data?.message || error.message
        }`
      );
    }
    if (error instanceof z.ZodError) {
      console.error("Validation error:", error.errors);
      throw new Error(
        "Invalid response format from LinkedIn API. Please try again later."
      );
    }
    throw error;
  } finally {
    clearTimeout(timeoutId);
  }
}

function generateAnalysisPrompt(
  profile: z.infer<typeof linkedinProfileSchema>
): string {
  const sections: string[] = [];

  if (profile.full_name || profile.headline || profile.occupation) {
    sections.push(
      `Profile: ${[profile.full_name, profile.headline, profile.occupation]
        .filter(Boolean)
        .join(" | ")}`
    );
  }

  if (profile.summary) {
    sections.push(`Summary: ${profile.summary}`);
  }

  if (profile.experiences?.length) {
    sections.push(
      "Experience:\n" +
        profile.experiences
          .map((exp) => {
            const duration = exp.starts_at
              ? `${exp.starts_at.year}${
                  exp.ends_at ? ` - ${exp.ends_at.year}` : " - Present"
                }`
              : "";
            return `- ${exp.title} at ${exp.company} ${duration}`;
          })
          .join("\n")
    );
  }

  if (profile.skills?.length) {
    sections.push(`Skills: ${profile.skills.join(", ")}`);
  }

  return sections.join("\n\n") || "No profile data available";
}

function parseAIResponse(content: string): LinkedInAnalysisResult {
  const scoreMatch = content.match(/(?:score|rating):\s*(\d+)/i);
  const score = scoreMatch
    ? Math.min(100, Math.max(0, parseInt(scoreMatch[1], 10)))
    : 50;

  const suggestions: ProfileSuggestion[] = [];
  const strengths: string[] = [];
  const weaknesses: string[] = [];

  // Split content into sections
  const sections = content.split(/\n{2,}/);

  // Track whether we found explicit strength/weakness sections
  let foundStrengths = false;
  let foundWeaknesses = false;

  // Process each section
  for (const section of sections) {
    // Check if this is a strengths section
    if (/strengths|strong points|positives|what's good/i.test(section)) {
      foundStrengths = true;
      const lines = section.split("\n");
      for (const line of lines) {
        const cleanLine = line.replace(/^[-•*]\s*/, "").trim();
        if (
          cleanLine.length > 5 &&
          !/strengths|strong points|positives|what's good/i.test(cleanLine)
        ) {
          strengths.push(cleanLine);
        }
      }
      continue;
    }

    // Check if this is a weaknesses section
    if (
      /weaknesses|weak points|negatives|areas to improve|improvement areas/i.test(
        section
      )
    ) {
      foundWeaknesses = true;
      const lines = section.split("\n");
      for (const line of lines) {
        const cleanLine = line.replace(/^[-•*]\s*/, "").trim();
        if (
          cleanLine.length > 5 &&
          !/weaknesses|weak points|negatives|areas to improve|improvement areas/i.test(
            cleanLine
          )
        ) {
          weaknesses.push(cleanLine);
        }
      }
      continue;
    }

    // Process other sections for suggestions
    const lines = section.split("\n");
    const sectionType = /experience|work|position|role|education/i.test(section)
      ? "experience"
      : /network|connection|engagement|endorsement/i.test(section)
      ? "network"
      : "profile";

    for (const line of lines) {
      const cleanLine = line.replace(/^[-•*]\s*/, "").trim();
      if (cleanLine.length > 10) {
        suggestions.push({
          section: sectionType,
          suggestion: cleanLine,
          priority:
            /critical|crucial|essential|urgent|important|must|should|need to/i.test(
              cleanLine
            )
              ? "high"
              : /consider|might|could|optional|maybe/i.test(cleanLine)
              ? "low"
              : "medium",
        });
      }
    }
  }

  // If we didn't find explicit sections, try to infer from all lines
  if (!foundStrengths || !foundWeaknesses) {
    const allLines = content.split("\n");
    for (const line of allLines) {
      const cleanLine = line.replace(/^[-•*]\s*/, "").trim();
      if (cleanLine.length < 10) continue;

      if (
        !foundStrengths &&
        /strength|good|excellent|impressive|well done|great|strong/i.test(
          cleanLine
        ) &&
        !cleanLine.includes("improve") &&
        !cleanLine.includes("should")
      ) {
        strengths.push(cleanLine);
      } else if (
        !foundWeaknesses &&
        /lack|missing|weak|improve|should add|consider adding|could be better/i.test(
          cleanLine
        )
      ) {
        weaknesses.push(cleanLine);
      }
    }
  }

  return {
    score,
    suggestions:
      suggestions.length > 0
        ? suggestions
        : [
            {
              section: "profile",
              suggestion: "Add more details to your profile",
              priority: "medium",
            },
          ],
    strengths:
      strengths.length > 0 ? strengths : ["No specific strengths identified"],
    weaknesses:
      weaknesses.length > 0
        ? weaknesses
        : ["Profile needs more detailed information"],
  };
}

// Directly implement the function, removing the memoize wrapper
async function analyzeWithAI(
  prompt: string,
  signal?: AbortSignal
): Promise<LinkedInAnalysisResult> {
  if (!isLinkedInAnalysisConfigured()) {
    throw new Error("LinkedIn analysis service is not properly configured");
  }

  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);

  try {
    const response = await fetch(
      "https://openrouter.ai/api/v1/chat/completions",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${OPENROUTER_API_KEY}`,
          "HTTP-Referer": window.location.origin,
        },
        body: JSON.stringify({
          model: MODEL,
          messages: [
            {
              role: "system",
              content:
                "You are a LinkedIn profile analyzer. Analyze the profile and provide: 1) A score (0-100), 2) 3-5 specific strengths of the profile, 3) 3-5 specific weaknesses or areas for improvement, and 4) Specific, actionable suggestions for improvement. Organize your response into clearly labeled sections for Score, Strengths, Weaknesses, and Suggestions. Be specific and detailed in your analysis.",
            },
            {
              role: "user",
              content: prompt,
            },
          ],
          max_tokens: 800,
          temperature: 0.3,
        }),
        signal: signal || controller.signal,
      }
    );

    if (!response.ok) {
      throw new Error(`AI API request failed: ${response.statusText}`);
    }

    const data = await response.json();
    const validated = openRouterResponseSchema.parse(data);
    return parseAIResponse(validated.choices[0].message.content);
  } catch (error) {
    if (error instanceof Error) {
      if (error.name === "AbortError" || signal?.aborted) {
        throw new Error("Analysis cancelled");
      }
      throw new Error(`AI analysis failed: ${error.message}`);
    }
    throw new Error("An unexpected error occurred during analysis");
  } finally {
    clearTimeout(timeoutId);
  }
}

export async function analyzeLinkedInProfile(
  profileUrl: string,
  signal?: AbortSignal
): Promise<LinkedInAnalysisResult> {
  try {
    if (!isLinkedInAnalysisConfigured()) {
      console.error("LinkedIn analysis not configured:", {
        RAPIDAPI_KEY: Boolean(RAPIDAPI_KEY),
        OPENROUTER_API_KEY: Boolean(OPENROUTER_API_KEY),
      });
      throw new Error(
        "LinkedIn analysis service is not properly configured. Please check your environment variables."
      );
    }

    // Clean cache periodically
    clearExpiredCache();

    // Validate and clean profile URL
    const cleanProfileUrl = extractProfileUrl(profileUrl);

    console.log("Fetching LinkedIn profile data...");
    // Fetch profile data
    const profileData = await fetchProfileData(cleanProfileUrl);
    console.log("Profile data fetched successfully", {
      hasName: Boolean(profileData.full_name),
      hasExperiences: Boolean(profileData.experiences?.length),
      numExperiences: profileData.experiences?.length || 0,
      hasSkills: Boolean(profileData.skills?.length),
      numSkills: profileData.skills?.length || 0,
    });

    // Generate analysis prompt
    const analysisPrompt = generateAnalysisPrompt(profileData);
    console.log("Analysis prompt generated", {
      promptLength: analysisPrompt.length,
    });

    console.log("Performing AI analysis...");
    // Perform AI analysis
    return await analyzeWithAI(analysisPrompt, signal);
  } catch (error: unknown) {
    console.error("LinkedIn analysis error:", error);

    // Handle Error objects
    if (error instanceof Error) {
      if (error.name === "AbortError" || signal?.aborted) {
        throw new Error("Analysis cancelled by user");
      }

      // Provide more specific error messages
      if (error.message.includes("RapidAPI")) {
        throw new Error(
          "LinkedIn API error: Failed to fetch profile data from LinkedIn API service"
        );
      }

      if (
        error.message.includes("OpenRouter") ||
        error.message.includes("AI API request failed")
      ) {
        throw new Error(
          "AI service error: Failed to analyze profile with AI service"
        );
      }

      if (error.message.includes("not properly configured")) {
        throw new Error(
          "Configuration error: LinkedIn analysis service is not properly configured. Please check environment variables."
        );
      }

      throw new Error(`LinkedIn analysis error: ${error.message}`);
    }

    // For non-Error objects
    throw new Error("An unexpected error occurred during analysis");
  }
}

export function clearCache() {
  cache.clear();
}

export function clearProfileCache(profileUrl: string) {
  const cacheKey = `profile:${profileUrl}`;
  cache.delete(cacheKey);
}
